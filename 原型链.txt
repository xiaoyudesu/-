

JS中一切皆对象，函数亦是对象。
所有对象都有__proto__属性，指向构造函数的原型对象。
只有函数有原型属性prototype,指向原型对象，包含所有实例共享的属性和方法。
函数的原型对象为Function.prototype。
对象的属性constructor指回原构造函数。
instanceof通过检测原型链来检测一个对象的构造函数是什么。运算方式为a.__proto__.__proto__...===b.prototype


var a={},b=new Object(),c=new Array(),d=function(){};
function E(){};
var e=new E();

function f(){};

E是构造函数，e是E的实例。

以下代码等同：
a.__proto__===Object.prototype
a.constructor===Object

a instanceof Object表示

a.__proto__.__proto__...===Object.prototype

其中，Object.prototype为原型对象。


以下代码返回值皆为true。
a.__proto__===Object.prototype
b.__proto__===Object.prototype
c.__proto__===Array.prototype
d.__proto__===Function.prototype
E.__proto__===Function.prototype
e.__proto__===E.prototype
f.__proto__===Function.prototype

d.prototype.__proto__===Object.prototype

Function.__proto__===Function.prototype
Object.__proto__===Function.prototype
Function.prototype.__proto__===Object.prototype

Object.prototype.__proto__===null
原型链到Object.prototype终止。

对于Object和Function的鸡和蛋问题：
Object instanceof Function //true
Function instanceof Object //true

以上代码等同于：
Object.__proto__===Function.prototype
Function.__proto__.__proto__===Object.prototype



注：Function.prototype是一个特殊的函数，没有prototype属性。



数据类型判断：
typeof 运算符，无法表明对象的构造函数。
a instanceof obj
a.constructor===obj
isNaN(x)

